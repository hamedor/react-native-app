{"version":3,"sources":["components/HomeScreen/HomeScreen.js","components/SearchScreen/SearchScreen.js","components/SettingsScreen/SettingsScreen.js","components/useFetch/useFetch.js","App.js"],"names":["styles","StyleSheet","create","container","flex","paddingTop","sectionHeader","paddingBottom","paddingLeft","paddingRight","fontSize","fontWeight","color","backgroundColor","item","padding","height","img","width","HomeScreen","data","View","style","SectionList","renderItem","map","e","Text","heading","text","Image","source","uri","id","renderSectionHeader","title","section","sections","input","margin","borderWidth","SearchScreen","useState","setText","template","setTemplate","useEffect","Object","values","flat","filter","el","includes","justifyContent","alignItems","TextInput","onChangeText","toLowerCase","placeholder","SettingsScreen","useFetch","initialUrl","userInputHeading","userInputText","base64","group","url","setData","isLoading","setIsLoading","setHasError","setErrorMessage","refetchIndex","setRefetchIndex","response","fetch","result","json","ok","modifiedData","entries","forEach","key","value","push","err","message","fetchData","deletePost","target","console","log","method","then","prevRefetchIndex","addPost","preventDefault","b","val","max","i","searchId","headers","body","JSON","stringify","Tab","createNativeStackNavigator","createBottomTabNavigator","App","NavigationContainer","Navigator","screenOptions","route","tabBarIcon","iconName","focused","size","name","Ionicons","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarStyle","Screen","children","component"],"mappings":"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","file":"static/js/app.8e37a770.chunk.js","sourcesContent":["import { StyleSheet, Text,View, Image, TouchableOpacity } from 'react-native';\r\nimport {useEffect} from 'react';\r\nimport { SectionList } from 'react-native';\r\nimport { useState } from 'react';\r\n\r\nconst HomeScreen = ({data}) =>{\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        <SectionList\r\n            renderItem={({item}) => item.map(e=>\r\n              <View key={e.id}>\r\n                <Text>{e.heading}</Text>\r\n                <Text>{e.text}</Text>\r\n                <Image\r\n        style={styles.img}\r\n        source={{\r\n          uri: e.img,\r\n        }}\r\n      />\r\n              </View> \r\n            )}\r\n            renderSectionHeader={({section: {title}}) => (\r\n                <Text style={{fontWeight: 'bold'}}>{title}</Text>)}\r\n            sections={data}\r\n        />\r\n    </View>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\ncontainer: {\r\nflex: 1,\r\npaddingTop: 22,\r\n},\r\nsectionHeader: {\r\npaddingTop: 2,\r\npaddingBottom: 2,\r\npaddingLeft: 10,\r\npaddingRight: 10,\r\nfontSize: 22,\r\nfontWeight: 'bold',\r\ncolor: '#fff',\r\nbackgroundColor: '#F55145',\r\n},\r\n\r\nitem: {\r\npadding: 10,\r\nfontSize: 18,\r\nheight: 44,\r\n},\r\nimg:{\r\n  width: 50,\r\n  height:50\r\n}\r\n});\r\n\r\nexport default HomeScreen;\r\n\r\n","import { useEffect, useState } from 'react';\r\nimport { StyleSheet, Text,View, Image, Item,TouchableOpacity, TextInput } from 'react-native';\r\n\r\nconst SearchScreen = (data) =>{\r\n    const [text, setText] = useState('');\r\n    const [template, setTemplate] = useState([]);\r\n    \r\n    useEffect(()=>{\r\n      const Search = () =>{  \r\n        setTemplate(Object.values(data).flat().map(e=>e.data).flat(2)\r\n        .filter(el=>el.heading.includes(text)).map((item)=> item));\r\n      }\r\n      setTemplate(Search);  \r\n    },[text])\r\n\r\n    const Item = () => {\r\n      if(!text){\r\n        return\r\n      }\r\n      return(\r\n        template.map(e=>\r\n          <View key={e.id}>\r\n            <Text>\r\n              {e.heading}\r\n            </Text>\r\n          </View>\r\n        )\r\n      )\r\n    }\r\n\r\n    return(\r\n      <View style={{flex:1, justifyContent:'flex-start', alignItems:'center'}}>\r\n        <TextInput\r\n        style={styles.input}\r\n        onChangeText={(text) =>setText(text.toLowerCase())}\r\n        placeholder='введите что-нибудь'\r\n      />\r\n      <Item/>\r\n      </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n  input: {\r\n    height: 40,\r\n    width:300,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\n\r\nexport default SearchScreen;","import { StyleSheet, Text,View, Image, TouchableOpacity } from 'react-native';\r\n\r\nconst SettingsScreen = () =>{\r\n    return(\r\n      <View style = {{flex:1, justifyContent: 'center', alignItems: 'center'}}>\r\n        <Text>Settings!</Text>\r\n      </View>\r\n    )\r\n  }\r\n\r\nexport default SettingsScreen;","import { useEffect, useState } from \"react\";\r\n\r\nexport const useFetch = (initialUrl, userInputHeading, userInputText, base64, group) => {\r\n    const [url, setUrl] = useState(initialUrl);\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [hasError, setHasError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [refetchIndex, setRefetchIndex] = useState(0);\r\n    \r\n  \r\n    const deletePost = (e, key) =>{\r\n      let id = e.target.id;\r\n      console.log(key)\r\n      fetch('http://827013-cs70445.tmweb.ru:4000/'+ key + '/' +  id, {\r\n        method: 'DELETE',\r\n      })\r\n      .then(() => setRefetchIndex((prevRefetchIndex) =>\r\n      prevRefetchIndex + 1));\r\n    };\r\n    const searchId = () =>{\r\n        let b=Object.values(data).map((val)=> val).flat();\r\n        let max = 0\r\n        for (let i in b) {\r\n          if (b[i].id > b[max].id) {\r\n            max = i\r\n          }\r\n        }\r\n        if(b[max]){\r\n          return b[max].id\r\n        }\r\n      }\r\n  \r\n    const addPost = (e) =>{\r\n      e.preventDefault();\r\n      let id = searchId();\r\n\r\n      fetch('http://827013-cs70445.tmweb.ru:4000/' + group + '/', {\r\n        method: 'POST',\r\n        headers:{\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          id: id + 1,\r\n          heading: userInputHeading,\r\n          text: userInputText,\r\n          img: base64\r\n        })\r\n      })\r\n      .then(() => setRefetchIndex((prevRefetchIndex) =>\r\n      prevRefetchIndex + 1));\r\n    }\r\n\r\n    useEffect(()=>{\r\n      const fetchData = async () =>{\r\n        setIsLoading(true);\r\n        try{\r\n          const response = await fetch(url);\r\n          const result = await response.json()\r\n            \r\n          if(response.ok){\r\n            let modifiedData = [];\r\n\r\n\r\n            Object.entries(result).forEach(([key,value]) =>{\r\n            modifiedData.push({title: key, data:[value]}) \r\n            })\r\n\r\n            setData(modifiedData)\r\n          }else{\r\n            setHasError(true);\r\n            setErrorMessage(result);\r\n          }\r\n          \r\n          \r\n        } catch (err) {\r\n          setHasError(true);\r\n          setErrorMessage(err.message);      \r\n        }finally{\r\n          setIsLoading(false)\r\n            \r\n        }\r\n      }\r\n      fetchData()\r\n      \r\n    },[url, refetchIndex])\r\n\r\n    return {data, isLoading,  deletePost, addPost}\r\n  }","import * as React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text,View, Image, TouchableOpacity } from 'react-native';\nimport { NavigationContainer} from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Ionicons from '@expo/vector-icons/Ionicons';\nimport HomeScreen from './components/HomeScreen/HomeScreen';\nimport SearchScreen from './components/SearchScreen/SearchScreen';\nimport SettingsScreen from './components/SettingsScreen/SettingsScreen';\nimport { useFetch } from './components/useFetch/useFetch';\nimport {useState, useEffect} from 'react';\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n\n  const [userInputHeading, setUserInputHeading] = useState('');\n  const [userInputText, setUserInputText] = useState('');\n  const [userInputImage, setUserInputImage] = useState('');\n  const [group, setGroup] = useState('museums');\n  const [base64, setBase64] = useState('');\n\n  const url = 'http://827013-cs70445.tmweb.ru:4000/db';\n  const { data, isLoading, deletePost, addPost} = useFetch(url, userInputHeading, userInputText, base64, group);\n\n  \n  const Form = ({data, userInputHeading, setUserInputHeading, userInputText, setUserInputText, userInputImage,setUserInputImage, addPost,setGroup, setBase64})=>{\n\n    const userHeadingChange = (e) => setUserInputHeading(e.target.value);\n    const userTextChange = (e) => setUserInputText(e.target.value);\n    const userCathegoryChange = (e) => {\n      setGroup(e.target.value)\n    }\n   \n    const userImageChange = (e) => {\n      setUserInputImage(e.target.value);\n      const file = e.target.files[0];\n      setBase64(base(file));\n    }\n  \n    async function base(file){\n      try{\n          const result = await toBase64(file)\n          setBase64(result);\n          return result\n      }catch(error){\n          console.log('ошибка')\n      }\n    }\n  \n    const toBase64 = (file) => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n  })\n\n    return(\n        <div className='modal'>\n            <form  className='form'> \n                <select onChange={userCathegoryChange}>\n                    {Object.keys(data).map(key =>\n                        <option key={key} value={key}>{key}</option> \n                    )}\n                </select>\n                <input type='text'\n                    value={userInputHeading}\n                    onChange={userHeadingChange}\n                    placeholder='Заголовок'\n                    className='form__input'>\n                </input>\n                <input type='text'\n                    value={userInputText}\n                    onChange={userTextChange}\n                    placeholder='Текст'\n                    className='form__input form__input-large'>\n                </input>\n                <input \n                    value={userInputImage}\n                    onChange={userImageChange}      \n                    type='file'\n                    placeholder='Загрузить изображение'\n                    className='form__input'>\n                </input>\n                <div className='form__buttonContainer'>\n                    <button className='btn' onClick={(e) =>addPost(e)}>Добавить запись</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\n  return (\n    <>\n   \n   <NavigationContainer>\n    <Tab.Navigator \n    screenOptions={({route}) =>({\n      tabBarIcon: ({focused, color, size}) =>{\n        let iconName;\n\n        if(route.name === 'Главная'){\n          iconName = focused\n          ? 'home'\n          : 'home-outline';\n        }else if(route.name === 'Поиск'){\n          iconName = focused\n          ? 'search'\n          : 'search-outline';\n        }else if (route.name === 'Настройки'){\n          iconName = focused \n          ? 'settings' \n          : 'settings-outline'\n        }\n        \n        return <Ionicons name={iconName} size={size} color={color} />\n      },\n      tabBarActiveTintColor: '#287233',\n      tabBarInactiveTintColor: 'gray',\n      tabBarStyle: {\n          backgroundColor: '#211c13'\n      },\n    })}\n    >\n\n\n\n      \n      <Tab.Screen name=\"Главная\"  children={()=><HomeScreen data={data}/>} \n      />\n      <Tab.Screen name=\"Поиск\" children={()=><SearchScreen data={data}/>}\n      />\n      <Tab.Screen name=\"Настройки\" component={SettingsScreen} />\n    </Tab.Navigator>\n   </NavigationContainer>\n   </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    \n    backgroundColor: '#211c13',\n    \n  },\n});\n"],"sourceRoot":""}