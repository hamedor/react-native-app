{"version":3,"sources":["components/ModalWindow/ModalWindow.js","components/HomeScreen/HomeScreen.js","components/SearchScreen/SearchScreen.js","components/SettingsScreen/SettingsScreen.js","components/useFetch/useFetch.js","components/ItemsListScreen/ItemsListScreen.js","components/ItemScreen/ItemScreen.js","App.js"],"names":["styles","StyleSheet","create","modalView","margin","backgroundColor","borderRadius","width","height","padding","alignItems","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","color","fontWeight","textAlign","modalText","marginBottom","ModalWindow","modalVisible","setModalVisible","data","addPost","setUserInputText","setUserInputTitle","selectedCathegory","setSelectedCathegory","setUserInputLatitude","setUserInputLongitude","image","setImage","pickImage","result","ImagePicker","mediaTypes","All","allowsEditing","aspect","quality","cancelled","uri","Modal","animationType","transparent","visible","View","style","centeredView","Text","TouchableOpacity","onPress","selectedValue","onValueChange","e","handlePickerChoose","map","Item","label","title","value","TextInput","input","onChangeText","text","toLowerCase","placeholder","Button","Image","source","container","flex","paddingTop","item","fontSize","borderWidth","marginTop","img","justifyContent","postAdd","HomeScreen","isEnabledAdminMode","deletePost","setNavCathegory","useState","navigation","useNavigation","Platform","OS","target","textContent","_dispatchInstances","memoizedProps","children","props","navigate","openItem","FlatList","renderItem","SearchScreen","setItem","setText","template","setTemplate","useEffect","Object","values","flat","filter","el","heading","includes","console","log","id","SettingsScreen","setIsEnabledAdminMode","isEnabledDarkTheme","Switch","trackColor","false","true","thumbColor","ios_backgroundColor","previousState","useFetch","initialUrl","userInputHeading","userInputText","userInputLatitude","userInputLongitude","group","url","setData","isLoading","setIsLoading","setHasError","setErrorMessage","refetchIndex","setRefetchIndex","response","fetch","json","ok","modifiedData","entries","forEach","key","push","err","message","fetchData","cathegory","method","then","prevRefetchIndex","preventDefault","b","val","max","i","searchId","headers","body","JSON","stringify","latitude","longitude","ItemsListScreen","navCathegory","ItemScreen","Tab","createBottomTabNavigator","App","userInputTitle","HomeStack","createNativeStackNavigator","SearchStack","NavigationContainer","Navigator","screenOptions","route","tabBarIcon","iconName","focused","size","name","Ionicons","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarStyle","Screen","component","options","headerShown"],"mappings":"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","file":"static/js/app.e80e716a.chunk.js","sourcesContent":["import {StyleSheet, Modal, View, TouchableOpacity, Image, TextInput, Text, Button } from \"react-native\"\r\nimport {Picker} from '@react-native-picker/picker';\r\nimport { useEffect, useState } from \"react\";\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nconst ModalWindow = ({modalVisible, setModalVisible, data, addPost, setUserInputText, setUserInputTitle,  selectedCathegory, setSelectedCathegory,setUserInputLatitude,setUserInputLongitude, image, setImage}) =>{\r\n\r\n  \r\n\r\n  const handlePickerChoose = (e) => {\r\n    setSelectedCathegory(e)\r\n  }\r\n  //КАК ВЫБРАТЬ КАТЕГОРИЮ ПО ДЕФОЛТУ, НО ТАК, ЧТОБЫ ПОСЛЕ ДОБАВЛЕНИЯ, КОГДА ПРОИСХОДИЛ РЕРЕНДЕРИНГ, СЕЛЕКТ НЕ УСТАНАВЛИВАЛСЯ В ЭТО ДЕФОЛТНОЕ ПОЛОЖЕНИЕ\r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return(\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n      >\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <Text style={styles.modalText}>Hello World!</Text>\r\n            <TouchableOpacity\r\n              style={[styles.button, styles.buttonClose]}\r\n              onPress={() => setModalVisible(!modalVisible)}\r\n            >\r\n              <Text style={styles.textStyle}>Hide Modal</Text>\r\n            </TouchableOpacity>\r\n            <Picker\r\n              style={{height:40, width:200}}\r\n              selectedValue={selectedCathegory}\r\n              onValueChange={(e) =>\r\n                handlePickerChoose(e)\r\n              }>\r\n              {data.map(e=>\r\n                <Picker.Item key={e.title} label={e.title} value={e.title} />\r\n                )}\r\n              \r\n           </Picker>\r\n            <TextInput\r\n              style={styles.input}\r\n              onChangeText={(text) =>setUserInputTitle(text.toLowerCase())}\r\n              placeholder='Название'\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              onChangeText={(text) =>setUserInputText(text.toLowerCase())}\r\n              placeholder='Описание'\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              onChangeText={(text) =>setUserInputLatitude(text.toLowerCase())}\r\n              placeholder='Широта'\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              onChangeText={(text) =>setUserInputLongitude(text.toLowerCase())}\r\n              placeholder='Долгота'\r\n            />\r\n             <Button title=\"Выберите изображение\" onPress={pickImage} />\r\n            {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\r\n            <TouchableOpacity\r\n              onPress={addPost}>\r\n              <Text>Добавить</Text>\r\n          </TouchableOpacity>\r\n          </View>\r\n          \r\n        </View>\r\n      </Modal>\r\n    )\r\n  }\r\n\r\n\r\n  const styles = StyleSheet.create({\r\n    modalView: {\r\n      margin: 20,\r\n      backgroundColor: \"white\",\r\n      borderRadius: 20,\r\n      width: 400,\r\n      height:800,\r\n      padding: 35,\r\n      alignItems: \"center\",\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 2\r\n      },\r\n      shadowOpacity: 0.25,\r\n      shadowRadius: 4,\r\n      elevation: 5\r\n    },\r\n    button: {\r\n      borderRadius: 20,\r\n      padding: 10,\r\n      elevation: 2\r\n    },\r\n    buttonOpen: {\r\n      backgroundColor: \"#F194FF\",\r\n    },\r\n    buttonClose: {\r\n      backgroundColor: \"#2196F3\",\r\n    },\r\n    textStyle: {\r\n      color: \"white\",\r\n      fontWeight: \"bold\",\r\n      textAlign: \"center\"\r\n    },\r\n    modalText: {\r\n      marginBottom: 15,\r\n      textAlign: \"center\"\r\n    }\r\n  })\r\n\r\n  \r\n  export default ModalWindow;","import { StyleSheet, Text,View, Image, TouchableOpacity,SectionList,Modal, TextInput, Button, FlatList, Platform } from 'react-native';\r\nimport {useEffect} from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nimport ModalWindow from '../ModalWindow/ModalWindow'\r\n\r\n\r\n\r\nconst HomeScreen = ({data, isEnabledAdminMode,deletePost, addPost, setUserInputTitle, setUserInputText,setNavCathegory, selectedCathegory, setSelectedCathegory,setUserInputLatitude,setUserInputLongitude, image, setImage}) =>{\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const ModalOpen = () => {\r\n    if(isEnabledAdminMode){\r\n      return <TouchableOpacity\r\n      onPress={()=> setModalVisible(!modalVisible)}>\r\n        <Text style={styles.postAdd}>Добавить пост</Text>\r\n      </TouchableOpacity>\r\n    }\r\n  }\r\n\r\n  const DeletePostButton = ({id, item}) =>{\r\n    if(isEnabledAdminMode){\r\n      return <TouchableOpacity\r\n      onPress={()=>deletePost(id, item)}>\r\n        <Text>Удалить</Text>\r\n      </TouchableOpacity>\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  const openItem = (e) =>{    \r\n    if(Platform.OS === 'web'){\r\n      setNavCathegory(e.target.textContent)\r\n    }else{\r\n      setNavCathegory(e._dispatchInstances.memoizedProps.children[0].props.children);\r\n    }\r\n    navigation.navigate('Категории');\r\n  }\r\n\r\n  const Item = ({ title }) => (\r\n    <TouchableOpacity\r\n      \r\n      onPress={(e) => openItem(e)}\r\n      style={styles.item}>\r\n      <Text style={styles.text}>{title}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  const renderItem = ({ item }) => (\r\n    <Item title={item.title} />\r\n  );\r\n\r\n\r\n  return (\r\n    <View style={{'height': '100%'}}>\r\n      <View style={styles.centeredView}>\r\n        <Text style={styles.title}>Выберите категорию</Text>\r\n          <FlatList\r\n            data={data}\r\n            renderItem={renderItem}\r\n            />\r\n           \r\n    </View>\r\n    <ModalOpen/>\r\n    <ModalWindow\r\n      data={data}\r\n      addPost={addPost}\r\n      modalVisible={modalVisible}\r\n      setModalVisible={setModalVisible}\r\n      setUserInputTitle={setUserInputTitle}\r\n      setUserInputText={setUserInputText}\r\n      setUserInputLatitude={setUserInputLatitude}\r\n      setUserInputLongitude={setUserInputLongitude}\r\n      selectedCathegory={selectedCathegory}\r\n      setSelectedCathegory={setSelectedCathegory}\r\n      image={image}\r\n      setImage={setImage}/>\r\n    </View>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\ncontainer: {\r\nflex: 1,\r\npaddingTop: 22,\r\n},\r\nitem: {\r\npadding: 10,\r\nfontSize: 18,\r\nheight: 44,\r\nborderWidth: 1,\r\nmarginTop: 10,\r\n},\r\nimg:{\r\n  width: 50,\r\n  height:50\r\n},\r\ncenteredView: {\r\n  flex: 1,\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  marginTop: 22\r\n},\r\ntitle:{\r\n  fontSize: 30\r\n},\r\npostAdd:{\r\n  borderWidth:1,\r\n  textAlign:'center',\r\n  marginBottom:10,\r\n  \r\n}\r\n\r\n});\r\n\r\nexport default HomeScreen;\r\n\r\n","import { useEffect, useState } from 'react';\r\nimport { StyleSheet, Text,View, Image, Item,TouchableOpacity, TextInput  } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\n\r\nconst SearchScreen = ({data, setItem}) =>{\r\n    const [text, setText] = useState('');\r\n    const [template, setTemplate] = useState([]);\r\n\r\n    const navigation = useNavigation();\r\n\r\n    const openDetails = (heading) =>{\r\n      navigation.navigate('Итемы');\r\n      setItem(heading);    \r\n    }\r\n    \r\n    useEffect(()=>{\r\n      const Search = () =>{  \r\n        setTemplate(Object.values(data).flat().map(e=>e.data).flat(2)\r\n        .filter(el=>el.heading.toLowerCase().includes(text)).map((item)=> item));\r\n      }\r\n      setTemplate(Search);  \r\n      console.log(template)\r\n    },[text])\r\n\r\n    \r\n    const Item = () => {\r\n      if(!text){\r\n        return\r\n      }\r\n      return(\r\n        template.map(e=>\r\n          <View key={e.id}>\r\n            <Text>\r\n              {e.heading}\r\n            </Text>\r\n            <TouchableOpacity\r\n              style={styles.button}\r\n              onPress={()=> openDetails(e.heading)}> \r\n              <Text style={styles.text}>Подробнее</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        )\r\n      )\r\n    }\r\n\r\n    return(\r\n      <View style={{flex:1, justifyContent:'flex-start', alignItems:'center'}}>\r\n        <TextInput\r\n        style={styles.input}\r\n        onChangeText={(text) =>setText(text.toLowerCase())}\r\n        placeholder='введите что-нибудь'\r\n      />\r\n      <Item/>\r\n      \r\n      </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n  input: {\r\n    height: 40,\r\n    width:300,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n  },\r\n\r\n});\r\n\r\n\r\nexport default SearchScreen;","import { useState } from 'react';\r\nimport { StyleSheet, Text,View, Switch, TouchableOpacity } from 'react-native';\r\n\r\nconst SettingsScreen = ({isEnabledAdminMode, isEnabledDarkTheme, setIsEnabledAdminMode}) =>{\r\n  \r\n  const toggleSwitch = () => setIsEnabledAdminMode(previousState => !previousState);\r\n\r\n    return(\r\n      <View style = {{flex:1, justifyContent: 'center', alignItems: 'center'}}>\r\n        <Switch\r\n          trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n          thumbColor={isEnabledAdminMode ? \"#f5dd4b\" : \"#f4f3f4\"}\r\n          ios_backgroundColor=\"#3e3e3e\"\r\n          onValueChange={toggleSwitch}\r\n          value={isEnabledAdminMode}\r\n        />\r\n      </View>\r\n    )\r\n  }\r\n\r\nexport default SettingsScreen;","import { useEffect, useState } from \"react\";\r\n\r\nexport const useFetch = (initialUrl, userInputHeading, userInputText, userInputLatitude, userInputLongitude ,image, group, setSelectedCathegory) => {\r\n    const [url, setUrl] = useState(initialUrl);\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [hasError, setHasError] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [refetchIndex, setRefetchIndex] = useState(0);\r\n\r\n  \r\n    const deletePost = (id, item) =>{\r\n      let cathegory= item.map(e=>e.title);\r\n\r\n      fetch('http://827013-cs70445.tmweb.ru:4000/'+ cathegory[0] + '/' +  id, {\r\n        method: 'DELETE',\r\n      })\r\n      .then(() => setRefetchIndex((prevRefetchIndex) =>\r\n      prevRefetchIndex + 1));\r\n    };\r\n    const searchId = () =>{\r\n        let b=Object.values(data).map((val)=> val).flat();\r\n        let max = 0\r\n        for (let i in b) {\r\n          if (b[i].id > b[max].id) {\r\n            max = i\r\n          }\r\n        }\r\n        if(b[max]){\r\n          return b[max].id\r\n        }\r\n      }\r\n  \r\n    const addPost = (e) =>{\r\n      e.preventDefault();\r\n      let id = searchId();\r\n\r\n      fetch('http://827013-cs70445.tmweb.ru:4000/' + group + '/', {\r\n        method: 'POST',\r\n        headers:{\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          id: id + 1,\r\n          heading: userInputHeading,\r\n          text: userInputText,\r\n          latitude: userInputLatitude,\r\n          longitude: userInputLongitude,\r\n          img: image\r\n        })\r\n      })\r\n      .then(() => setRefetchIndex((prevRefetchIndex) =>\r\n      prevRefetchIndex + 1));\r\n    }\r\n\r\n    useEffect(()=>{\r\n      const fetchData = async () =>{\r\n        setIsLoading(true);\r\n        try{\r\n          const response = await fetch(url);\r\n          const result = await response.json()\r\n            \r\n          if(response.ok){\r\n            let modifiedData = [];\r\n\r\n            Object.entries(result).forEach(([key,value]) =>{\r\n              value.map(e=>e.title=key)\r\n              modifiedData.push({title: key, data:[value]}) \r\n            })\r\n            setData(modifiedData)\r\n            \r\n          }else{\r\n            setHasError(true);\r\n            setErrorMessage(result);\r\n          }\r\n          \r\n          \r\n        } catch (err) {\r\n          setHasError(true);\r\n          setErrorMessage(err.message);      \r\n        }finally{\r\n          setIsLoading(false)\r\n            \r\n        }\r\n      }\r\n      fetchData()\r\n      \r\n    },[url, refetchIndex])\r\n\r\n    return {data, isLoading,  deletePost, addPost}\r\n  }","import {StyleSheet ,View,Text,Button, Image, TouchableOpacity } from \"react-native\";\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useState } from \"react\";\r\n\r\nconst ItemsListScreen = ({ data, setNavCathegory, navCathegory, setItem}) => {\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const openDetails = (heading) =>{\r\n    navigation.navigate('Итемы');\r\n    setItem(heading);    \r\n  }\r\n\r\n  const Item = () =>{\r\n    return(\r\n      data.filter(e=> e.title=== navCathegory)\r\n      .map(el=>el.data).flat(2).map(el=> \r\n      <View key={el.id}>\r\n          <Image\r\n          style={styles.img}\r\n          source={{\r\n            uri: el.img,\r\n          }}/>\r\n        <Text>{el.heading}</Text>\r\n        <Text>{el.text}</Text>\r\n        <TouchableOpacity\r\n          style={styles.button}\r\n          onPress={()=> openDetails(el.heading)}> \r\n          <Text style={styles.text}>Подробнее</Text>\r\n        </TouchableOpacity>\r\n      </View>)\r\n    )\r\n  }\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n        <Item/>\r\n \r\n      </View>\r\n    );\r\n  }\r\n  \r\n\r\nconst styles = StyleSheet.create({\r\n  img:{\r\n    width: 50,\r\n    height:50\r\n  },\r\n\r\n});\r\n\r\n\r\n\r\nexport default ItemsListScreen;\r\n\r\n/*\r\n\r\n\r\n\r\n*/","import { useEffect } from \"react\";\r\nimport { View,Text,Button, Image, StyleSheet,Dimensions } from \"react-native\";\r\nimport MapView from 'react-native-maps';\r\n\r\nconst ItemScreen = ({ data, navCathegory, item}) => {\r\n\r\n  const Item = () =>{\r\n    return(\r\n      data.map(el=>el.data).flat(2).filter(el=>el.heading===item).map(el=> \r\n      <View key={el.id}>\r\n        <Text>{el.heading}</Text>\r\n        <Text>{el.text}</Text>\r\n        <Image\r\n          style={styles.img}\r\n          source={{\r\n            uri: el.img,\r\n          }}/> \r\n        </View>))  \r\n  }\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n        <Item/>\r\n        <MapView style={styles.map} />\r\n      </View>\r\n    );\r\n  }\r\n\r\nconst styles = StyleSheet.create({\r\n  img:{\r\n    width: 50,\r\n    height:50\r\n  },\r\n  map: {\r\n    width: 100,\r\n    height: 100,\r\n  },\r\n});\r\n\r\nexport default ItemScreen;","import * as React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text,View, Button, Image, TouchableOpacity } from 'react-native';\nimport { NavigationContainer} from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Ionicons from '@expo/vector-icons/Ionicons';\nimport HomeScreen from './components/HomeScreen/HomeScreen';\nimport SearchScreen from './components/SearchScreen/SearchScreen';\nimport SettingsScreen from './components/SettingsScreen/SettingsScreen';\nimport { useFetch } from './components/useFetch/useFetch';\nimport {useState, useEffect} from 'react';\n\nimport ItemsListScreen from './components/ItemsListScreen/ItemsListScreen';\nimport ItemScreen from './components/ItemScreen/ItemScreen';\n\n\nconst Tab = createBottomTabNavigator();\n\nexport default function App() {\n  \n  \n  \n  const Map = () => {\n    return (\n      <YaMap\n        userLocationIcon={{ uri: 'https://www.clipartmax.com/png/middle/180-1801760_pin-png.png' }}\n        initialRegion={{\n          lat: 50,\n          lon: 50,\n          zoom: 10,\n          azimuth: 80,\n          tilt: 100\n        }}\n        style={{ flex: 1 }}\n      />\n    );\n  };\n\n\n\n  const [userInputText, setUserInputText] = useState('');\n  const [userInputTitle, setUserInputTitle] = useState('');\n  const [userInputLatitude, setUserInputLatitude] = useState('');\n  const [userInputLongitude, setUserInputLongitude] = useState('');\n  const [image, setImage] = useState(null);\n  const [navCathegory, setNavCathegory] = useState('');\n  const [item, setItem] = useState('');\n\n  const [selectedCathegory, setSelectedCathegory] = useState();\n\n  const [base64, setBase64] = useState('');\n  const [isEnabledAdminMode, setIsEnabledAdminMode] = useState(true);\n  const [isEnabledDarkTheme, setIsEnabledDarkTheme] = useState(false);\n\n  const url = 'http://827013-cs70445.tmweb.ru:4000/db';\n  const { data, isLoading, deletePost, addPost} = useFetch(url, userInputTitle, userInputText, userInputLatitude, userInputLongitude , image, selectedCathegory, setSelectedCathegory);\n\n  const HomeStack = createNativeStackNavigator();\n  const HomeStackScreen = () =>{\n    return (\n      <HomeStack.Navigator>\n        <HomeStack.Screen name=\"Главная\"\n        children={()=>    \n        <HomeScreen\n          data={data}    \n          isEnabledAdminMode={isEnabledAdminMode}\n          deletePost={deletePost}\n          addPost={addPost}\n          setUserInputTitle={setUserInputTitle}\n          setUserInputText={setUserInputText}\n          setUserInputLatitude={setUserInputLatitude}\n          setUserInputLongitude={setUserInputLongitude}\n          selectedCathegory={selectedCathegory}\n          setSelectedCathegory={setSelectedCathegory}\n          image={image}\n          setImage={setImage}\n          setNavCathegory={setNavCathegory}\n        />}\n      /> \n      <HomeStack.Screen name=\"Категории\"  children={()=>    \n        <ItemsListScreen \n          data={data}\n          navCathegory={navCathegory}\n          setItem={setItem}\n        />} \n      />\n      <HomeStack.Screen name=\"Итемы\" children={()=>\n        <ItemScreen\n          data={data}\n          item={item}\n        />}\n      /> \n    </HomeStack.Navigator>\n  );\n}\nconst SearchStack = createNativeStackNavigator();\nconst SearchStackScreen = () =>{\n  return(\n    <SearchStack.Navigator>\n      <SearchStack.Screen name='Поиск'  children={()=>    \n        <SearchScreen\n          data={data}\n          setItem={setItem}\n          \n        />}\n      />\n       <SearchStack.Screen name=\"Итемы\" children={()=>\n        <ItemScreen\n          data={data}\n          item={item}\n        />}\n      /> \n      \n    </SearchStack.Navigator>\n  )\n}\n\n\n\n  return (\n    <>\n   \n   <NavigationContainer>\n  \n    <Tab.Navigator \n    screenOptions={({route}) =>({\n      tabBarIcon: ({focused, color, size}) =>{\n        let iconName;\n\n        if(route.name === 'Главная'){\n          iconName = focused\n          ? 'home'\n          : 'home-outline';\n        }else if(route.name === 'Поиск'){\n          iconName = focused\n          ? 'search'\n          : 'search-outline';\n        }else if (route.name === 'Настройки'){\n          iconName = focused \n          ? 'settings' \n          : 'settings-outline'\n        }\n        \n        return <Ionicons name={iconName} size={size} color={color} />\n      },\n      tabBarActiveTintColor: '#287233',\n      tabBarInactiveTintColor: 'gray',\n      tabBarStyle: {\n          backgroundColor: '#211c13'\n      },\n    })}\n    >\n     \n\n\n\n      \n      <Tab.Screen name=\"Главная\"  component={HomeStackScreen} options={{ headerShown: false }}/>\n      <Tab.Screen name=\"Поиск\" component={SearchStackScreen} options={{ headerShown: false }}/>\n      <Tab.Screen name=\"Настройки\" children={()=>\n      <SettingsScreen\n        isEnabledAdminMode={isEnabledAdminMode}\n        setIsEnabledAdminMode={setIsEnabledAdminMode}\n        isEnabledDarkTheme={isEnabledDarkTheme}\n        \n        />}\n      />\n    </Tab.Navigator>\n\n\n   </NavigationContainer>\n   </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    \n    backgroundColor: '#211c13',\n    \n  },\n});\n"],"sourceRoot":""}